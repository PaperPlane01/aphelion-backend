package aphelion.model.dto;

import aphelion.model.domain.BlogPostPublisherType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Collection;
import java.util.Date;
import java.util.Map;

@NoArgsConstructor
@AllArgsConstructor
@Data
@Builder
@ApiModel(value = "Blog post", description = "Object representing a blog post")
public class BlogPostDTO {
    @ApiModelProperty("Id of blog post")
    private Long id;
    @ApiModelProperty("Title of blog post")
    private String title;
    @ApiModelProperty(
            value = "Content of blog post. This object is generated by draft-js text editor.\n " +
                    "For more information, read this https://draftjs.org/docs/api-reference-content-state"
    )
    private Map<Object, Object> content;
    @ApiModelProperty(
            value = "Publisher of blog post. Can be either user or blog post.\n" +
                    "If <code>publishedBy === BLOG_POST_AUTHOR</code>, this object " +
                    "represents a user.\n" +
                    "If <code>publishedBy === BLOG</code>, then this object represents a blog"
    )
    private BlogPostPublisher publisher;
    @ApiModelProperty("Id of blog")
    private Long blogId;
    @ApiModelProperty("Blog post creation date")
    private Date createdAt;
    @ApiModelProperty("Tags of blog post")
    private Collection<TagDTO> tags;
    @ApiModelProperty("Number of likes")
    private Integer numberOfLikes;
    @ApiModelProperty("Number of comments")
    private Integer numberOfComments;
    @ApiModelProperty("Indicates if this blog post has been liked by current user")
    private boolean likedByCurrentUser;
    @ApiModelProperty(
            value = "Id of like left by current user.\n " +
                    "If user has not liked the post, the value is <code>null</code>"
    )
    private Long likeId;
    @ApiModelProperty("Number of views")
    private int numberOfViews;
    @ApiModelProperty("Indicates if blog post has been deleted")
    private boolean deleted;
    @ApiModelProperty(
            value = "Id of user who deleted blog post.\n" +
                    "The value is <code>null</code> if blog post hasn't been deleted"
    )
    private Long deletedByUserId;
    @ApiModelProperty("Blog post publisher type")
    private BlogPostPublisherType publishedBy;
    @ApiModelProperty("Indicates if blog post can be edited by current user")
    private boolean canBeEdited;
    @ApiModelProperty("Indicates if blog post can be deleted by current user")
    private boolean canBeDeleted;
    @ApiModelProperty("Indicates if blog post has been pinned")
    private boolean pinned;
    @ApiModelProperty(
            value = "Date when blog post was pinned.\n" +
                    "The value is <code>null</code> if blog post is not pinned"
    )
    private Date pinDate;
}
